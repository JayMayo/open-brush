/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test ChangeAuthenticatedUserEmailUsersMeEmailPatch
        /// </summary>
        [Test]
        public void ChangeAuthenticatedUserEmailUsersMeEmailPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmailChangeAuthenticated emailChangeAuthenticated = null;
            //var response = instance.ChangeAuthenticatedUserEmailUsersMeEmailPatch(emailChangeAuthenticated);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ChangeAuthenticatedUserPasswordUsersMePasswordPatch
        /// </summary>
        [Test]
        public void ChangeAuthenticatedUserPasswordUsersMePasswordPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordChangeAuthenticated passwordChangeAuthenticated = null;
            //var response = instance.ChangeAuthenticatedUserPasswordUsersMePasswordPatch(passwordChangeAuthenticated);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ChangePasswordViaTokenUsersPasswordPatch
        /// </summary>
        [Test]
        public void ChangePasswordViaTokenUsersPasswordPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordChangeToken passwordChangeToken = null;
            //var response = instance.ChangePasswordViaTokenUsersPasswordPatch(passwordChangeToken);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CreateUserUsersPost
        /// </summary>
        [Test]
        public void CreateUserUsersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewUser newUser = null;
            //var response = instance.CreateUserUsersPost(newUser);
            //Assert.IsType<FullUser>(response);
        }

        /// <summary>
        /// Test GetIdUserAssetsUsersIdUserAssetsGet
        /// </summary>
        [Test]
        public void GetIdUserAssetsUsersIdUserAssetsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int user = null;
            //var response = instance.GetIdUserAssetsUsersIdUserAssetsGet(user);
            //Assert.IsType<List<Asset>>(response);
        }

        /// <summary>
        /// Test GetMeAssetsUsersMeAssetsGet
        /// </summary>
        [Test]
        public void GetMeAssetsUsersMeAssetsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeAssetsUsersMeAssetsGet();
            //Assert.IsType<List<Asset>>(response);
        }

        /// <summary>
        /// Test GetUserAssetsUsersUserAssetsGet
        /// </summary>
        [Test]
        public void GetUserAssetsUsersUserAssetsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //var response = instance.GetUserAssetsUsersUserAssetsGet(user);
            //Assert.IsType<List<Asset>>(response);
        }

        /// <summary>
        /// Test GetUserUsersIdUserGet
        /// </summary>
        [Test]
        public void GetUserUsersIdUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int user = null;
            //var response = instance.GetUserUsersIdUserGet(user);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetUserUsersUserGet
        /// </summary>
        [Test]
        public void GetUserUsersUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //var response = instance.GetUserUsersUserGet(user);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetUsersMeUsersMeGet
        /// </summary>
        [Test]
        public void GetUsersMeUsersMeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUsersMeUsersMeGet();
            //Assert.IsType<FullUser>(response);
        }

        /// <summary>
        /// Test UpdateUserUsersMePatch
        /// </summary>
        [Test]
        public void UpdateUserUsersMePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PatchUser patchUser = null;
            //var response = instance.UpdateUserUsersMePatch(patchUser);
            //Assert.IsType<FullUser>(response);
        }

        /// <summary>
        /// Test UserPasswordResetRequestUsersPasswordResetPut
        /// </summary>
        [Test]
        public void UserPasswordResetRequestUsersPasswordResetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordReset passwordReset = null;
            //var response = instance.UserPasswordResetRequestUsersPasswordResetPut(passwordReset);
            //Assert.IsType<Object>(response);
        }
    }
}
